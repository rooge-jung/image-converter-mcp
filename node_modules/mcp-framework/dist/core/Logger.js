import { createWriteStream } from "fs";
import { join } from "path";
import { mkdir } from "fs/promises";
export class Logger {
    static instance;
    logStream;
    logFilePath;
    constructor() {
        const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
        const logDir = "logs";
        mkdir(logDir, { recursive: true }).catch((err) => {
            process.stderr.write(`Failed to create logs directory: ${err}\n`);
        });
        this.logFilePath = join(logDir, `mcp-server-${timestamp}.log`);
        this.logStream = createWriteStream(this.logFilePath, { flags: "a" });
        process.on("exit", () => this.close());
        process.on("SIGINT", () => this.close());
        process.on("SIGTERM", () => this.close());
    }
    static getInstance() {
        if (!Logger.instance) {
            Logger.instance = new Logger();
        }
        return Logger.instance;
    }
    getTimestamp() {
        return new Date().toISOString();
    }
    formatMessage(level, message) {
        return `[${this.getTimestamp()}] [${level}] ${message}\n`;
    }
    info(message) {
        const formattedMessage = this.formatMessage("INFO", message);
        this.logStream.write(formattedMessage);
        process.stderr.write(formattedMessage);
    }
    log(message) {
        this.info(message);
    }
    error(message) {
        const formattedMessage = this.formatMessage("ERROR", message);
        this.logStream.write(formattedMessage);
        process.stderr.write(formattedMessage);
    }
    warn(message) {
        const formattedMessage = this.formatMessage("WARN", message);
        this.logStream.write(formattedMessage);
        process.stderr.write(formattedMessage);
    }
    debug(message) {
        const formattedMessage = this.formatMessage("DEBUG", message);
        this.logStream.write(formattedMessage);
        process.stderr.write(formattedMessage);
    }
    close() {
        if (this.logStream) {
            this.logStream.end();
        }
    }
    getLogPath() {
        return this.logFilePath;
    }
}
export const logger = Logger.getInstance();
